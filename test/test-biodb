#!/usr/bin/env Rscript
# vi: ft=R
library(RUnit)
library(getopt)
args <- commandArgs(trailingOnly = FALSE)
script.path <- sub("--file=", "", args[grep("--file=", args)])
source(file.path(dirname(script.path), '..', 'BiodbFactory.R'), chdir = TRUE)

#############
# CONSTANTS #
#############

USER.AGENT <- "r-biodb.test ; pierrick.roger@gmail.com"

#############
# READ ARGS #
#############

read.args <- function() {
  
  # program name
  prog <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)
  
  # options
  spec = matrix(c(
    'all',          'a', 0, 'logical',      'Run all tests (online, long, etc.). Disabled by default.',
    'help',         'h', 0, 'logical',      'Print this help.',
    'name',         'n', 1, 'character',    'Run only test of the specified name. Unset by default.',
    'quick',        'q', 0, 'logical',      'Do not run long tests. Disabled by default.',
    'offline',      'o', 0, 'logical',      'Run offline tests only. Disabled by default.'
  ), byrow = TRUE, ncol = 5)
   
  opt <- getopt(spec)

  # help
  if ( ! is.null(opt$help)) {
    cat(getopt(spec, usage = TRUE, command = prog))
    q(status = 0)
  }

  return(opt)
}

###############
# ONLINE TEST #
###############

online.test <- function(db, entry.type, entries.desc) {

	# Create factory
	factory <- BiodbFactory$new(useragent = USER.AGENT)

	# Get file extension
	ext <- factory$getConn(db)$getEntryContentType(entry.type)

	# Test a wrong accession number
	print('TEST WRONG')
	wrong.accession <- 'WRONG'
	wrong.content <- factory$getEntryContent(db, entry.type, wrong.accession)
	writeLines(wrong.content, paste0(db, '-', entry.type, '-wrong_accession.', ext))
	print('TEST WRONG - create entry')
	wrong.entry <- factory$createEntry(db, entry.type, content = wrong.content)
	checkTrue(is.null(wrong.entry))

	# TODO Use database .txt file to test entries (spectra or compounds).
	# TODO Use handlesEntryType() method to know when a database is a spectra or a compound database (or both).

	# Download contents
	print('TEST RIGHTS')
	contents <- factory$getEntryContent(db, entry.type, entries.desc[[RBIODB.ACCESSION]])
	
	# Save contents into files
	print('SAVE INTO FILES')
	filenames <- vapply(entries.desc[[RBIODB.ACCESSION]], function(x) paste0(db, '-', entry.type, '-', x, '.', ext), FUN.VALUE = '')
	mapply(writeLines, contents, filenames)

	# Create entries
	print('CREATE ENTRIES')
	entries <- factory$createEntry(db, entry.type, content = contents)
	print('LENGTH.ENTRIES=')
	print(length(entries))

	# Test fields of entries
	for (f in colnames(entries.desc)) {
		print('F=')
			print(f)
		switch(f,
				checkEquals(entries.desc[[f]], vapply(entries, function(e) e$getField(f), FUN.VALUE = entries.desc[1, f]))
			  )
	}
}

########
# MAIN #
########

# Call tests matching name: in script name or function name:
#  test.chebi.offline
#  test.chebi.online
#  test.chebi.full or test.chebi.long

options(error = function() { traceback(2) ; q(status = 1) }, warn = 2 )

opt <- read.args()

# Define set of functions
test.fcts = NULL
#test.fcts = '^test\\..+'
#if (is.null(opt$quick) && is.null(opt$all))
#	test.fcts = c(test.fcts, '^long\\.test\\..+')
if (is.null(opt$offline) && is.null(opt$all))
	test.fcts = c(test.fcts, '^online\\.test\\..+')
#if (is.null(opt$quick) && is.null(opt$offline) && is.null(opt$all))
#	test.fcts = c(test.fcts, '^long\\.online\\.test\\..+')
if ( ! is.null(opt$name))
	test.fcts = paste0('^', opt$name, '$')

for (fct in test.fcts) {
	test.suite <- defineTestSuite('biodb', dirname(script.path), testFileRegexp = '^test-(massbank)\\.R$', testFuncRegexp = fct)
	test.result <- runTestSuite(test.suite)
	printTextProtocol(test.result)
}
