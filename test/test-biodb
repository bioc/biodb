#!/usr/bin/env Rscript
# vi: ft=R
library(RUnit)
library(getopt)
args <- commandArgs(trailingOnly = FALSE)
script.path <- sub("--file=", "", args[grep("--file=", args)])
source(file.path(dirname(script.path), '..', 'BiodbFactory.R'), chdir = TRUE)

#############
# CONSTANTS #
#############

USER.AGENT <- "r-biodb.test ; pierrick.roger@gmail.com"

#############
# READ ARGS #
#############

read.args <- function() {
  
  # program name
  prog <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)
  
  # options
  spec = matrix(c(
    'help',         'h', 0, 'logical',      'Print this help.',
    'name',         'n', 1, 'character',    'Run only test of the specified name. Unset by default.',
    'quick',        'q', 0, 'logical',      'Turn off long tests. Disabled by default.',
    'offline',      'f', 0, 'logical',      'Turn off online tests. Disabled by default.',
    'online',       'o', 0, 'logical',      'Turn off offline tests. Disabled by default.',
    'databases',    'd', 1, 'character',    'Set a restricted list of databases to test. The list must be specified as a comma separated list, no spaces. If unset, test all databases.'
  ), byrow = TRUE, ncol = 5)
   
  opt <- getopt(spec)

  # Help
  if ( ! is.null(opt$help)) {
    cat(getopt(spec, usage = TRUE, command = prog))
    q(status = 0)
  }

  # Process lists
  if ( ! is.null(opt$databases))
	  opt$databases <- strsplit(opt$databases, ",")[[1]]

  return(opt)
}

######################
# BIODB TEST FACTORY #
######################

BiodbTestFactory <- setRefClass("BiodbTestFactory", contains = "BiodbFactory", fields = list(.online = 'logical'))

BiodbTestFactory$methods( initialize = function(online, ...) {
	.online <<- online
	callSuper(...)
})

BiodbTestFactory$methods( getEntryContent = function(class, type, id) {

	# Get file extension
	ext <- .self$getConn(class)$getEntryContentType(type)

	# Set content filenames
	content.filenames <- vapply(id, function(x) paste0(class, '-', type, '-', x, '.', ext), FUN.VALUE = '')

	if (.self$.online) {

		# Get contents from database
		conn <- .self$getConn(class)
		content <- conn$getEntryContent(type, id)

		# Write contents into files
		content.file.path <- vapply(content.filenames, function(x) file.path(dirname(script.path), x), FUN.VALUE = '')
		mapply(writeLines, content, content.file.path)
	}
	else {

		# Read contents from files
		content.file.path <- vapply(content.filenames, function(x) file.path(dirname(script.path), 'res', x), FUN.VALUE = '')
		content <- vapply(content.file.path, function(x) paste(readLines(x), collapse = "\n"), FUN.VALUE = '')
	}

	return(content)
})


################
# TEST ENTRIES #
################

test.entries <- function(db, entry.type, online = TRUE) {

	# Create factory
	factory <- BiodbTestFactory$new(online = online, useragent = USER.AGENT)

	# Test a wrong accession number
	wrong.entry <- factory$createEntry(db, entry.type, id = 'WRONG')
	checkTrue(is.null(wrong.entry))

	# Download contents
	entries.file <- file.path(dirname(script.path), 'res', paste0(if (entry.type == RBIODB.SPECTRUM) 'spectra' else 'compounds', '-', db, '.txt'))
	entries.desc <- read.table(entries.file, stringsAsFactors = FALSE, header = TRUE)

	# Create entries
	entries <- factory$createEntry(db, entry.type, id = entries.desc[[RBIODB.ACCESSION]], drop = FALSE)

	# Test fields of entries
	for (f in colnames(entries.desc)) {
		entries.desc[[f]] <- as.vector(entries.desc[[f]], mode = entries[[1]]$getFieldClass(f))
		card <- entries[[1]]$getFieldCardinality(f)
		e.values <- vapply(entries, function(e) if (card == RBIODB.CARD.ONE || is.na(e$getField(f))) e$getField(f) else paste(e$getField(f), collapse = ';'), FUN.VALUE = vector(mode = entries[[1]]$getFieldClass(f), length = 1))
		checkEquals(entries.desc[[f]], e.values, paste0("Error with field \"", f, "\":\nReference: ", paste(entries.desc[[f]], collapse = ", "), "\nValues: ", paste(e.values, collapse = ", ")))
	}
}

########
# MAIN #
########

options(error = function() { traceback(2) ; q(status = 1) }, warn = 2 )

opt <- read.args()

# Define set of functions
if ( ! is.null(opt$name)) {
	test.fcts <- paste0('^', opt$name, '$')
} else {

	# Set prefix
	prefix <- NULL
	if (is.null(opt$online))
		prefix <- c(prefix, 'offline')
	if (is.null(opt$offline))
		prefix <- c(prefix, 'online')
	if ( ! is.null(prefix))
		prefix <- paste0('(', paste(prefix, collapse = '|'), ')\\.')

	# Set databases to test
	dbs <- '\\..+' # all databases by default
	if ( ! is.null(opt$databases))
		dbs <- paste0('\\.(', paste(opt$databases, collapse = '|'), ')')

	# Set test functions
	test.fcts <- paste0('^', prefix, 'test', dbs)
}

test.suite <- defineTestSuite('biodb', dirname(script.path), testFileRegexp = '^test-databases\\.R$', testFuncRegexp = test.fcts)
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
