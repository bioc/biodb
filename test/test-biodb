#!/usr/bin/env Rscript
# vi: ft=R
library(RUnit)
library(getopt)
args <- commandArgs(trailingOnly = FALSE)
script.path <- sub("--file=", "", args[grep("--file=", args)])
source(file.path(dirname(script.path), '..', 'BiodbFactory.R'), chdir = TRUE)

#############
# CONSTANTS #
#############

USER.AGENT <- "r-biodb.test ; pierrick.roger@gmail.com"

#############
# READ ARGS #
#############

read.args <- function() {
  
  # program name
  prog <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)
  
  # options
  spec = matrix(c(
    'help',         'h', 0, 'logical',      'Print this help.',
    'name',         'n', 1, 'character',    'Run only test of the specified name. Unset by default.',
    'quick',        'q', 0, 'logical',      'Turn off long tests. Disabled by default.',
    'offline',      'f', 0, 'logical',      'Turn off online tests. Disabled by default.',
    'online',       'o', 0, 'logical',      'Turn off offline tests. Disabled by default.'
  ), byrow = TRUE, ncol = 5)
   
  opt <- getopt(spec)

  # help
  if ( ! is.null(opt$help)) {
    cat(getopt(spec, usage = TRUE, command = prog))
    q(status = 0)
  }

  return(opt)
}

#####################
# GET ENTRY CONTENT #
#####################

get.entry.content <- function(factory, db, entry.type, accession, online) {

	# Get file extension
	ext <- factory$getConn(db)$getEntryContentType(entry.type)

	# Set content filenames
	content.filenames <- vapply(accession, function(x) paste0(db, '-', entry.type, '-', x, '.', ext), FUN.VALUE = '')

	if (online) {

		# Get contents from database
		contents <- factory$getEntryContent(db, entry.type, accession)

		# Write contents into files
		content.file.path <- vapply(content.filenames, function(x) file.path(dirname(script.path), x), FUN.VALUE = '')
		mapply(writeLines, contents, content.file.path)
	}
	else {

		# Read contents from files
		content.file.path <- vapply(content.filenames, function(x) file.path(dirname(script.path), 'res', x), FUN.VALUE = '')
		contents <- vapply(content.file.path, function(x) paste(readLines(x), collapse = "\n"), FUN.VALUE = '')
	}

	return(contents)
}

################
# TEST ENTRIES #
################

test.entries <- function(db, entry.type, online = TRUE) {

	# Create factory
	factory <- BiodbFactory$new(useragent = USER.AGENT)

	# Test a wrong accession number
	wrong.content <- get.entry.content(factory, db, entry.type, 'WRONG', online = online)
	wrong.entry <- factory$createEntry(db, entry.type, content = wrong.content)
	checkTrue(is.null(wrong.entry))

	# TODO Use database .txt file to test entries (spectra or compounds).
	# TODO Use handlesEntryType() method to know when a database is a spectra or a compound database (or both).

	# Download contents
	entries.file <- file.path(dirname(script.path), 'res', paste0(if (entry.type == RBIODB.SPECTRUM) 'spectra' else 'compounds', '-', db, '.txt'))
	entries.desc <- read.table(entries.file, stringsAsFactors = FALSE, header = TRUE)
	contents <- get.entry.content(factory, db, entry.type, entries.desc[[RBIODB.ACCESSION]], online = online)

	# Create entries
	entries <- factory$createEntry(db, entry.type, content = contents, drop = FALSE)

	# Test fields of entries
#	print(entries)
	for (f in colnames(entries.desc)) {
#		print('FIELD')
#		print(f)
#		print(entries[[1]])
		entries.desc[[f]] <- as.vector(entries.desc[[f]], mode = entries[[1]]$getFieldClass(f))
#		print(entries.desc[[f]])
		e.values <- vapply(entries, function(e) e$getField(f), FUN.VALUE = vector(mode = entries[[1]]$getFieldClass(f), length = 1))
#		print(e.values)
		switch(f,
				checkEquals(entries.desc[[f]], e.values, paste0("Error with field \"", f, "\"."))
			  )
	}
}

#########################
# MASS BANK ENTRY TESTS #
#########################

#online.test.massbank <- function() {
#	test.entries(RBIODB.MASSBANK, RBIODB.SPECTRUM)
#}
#
#offline.test.massbank <- function() {
#	test.entries(RBIODB.MASSBANK, RBIODB.SPECTRUM, online = FALSE)
#}

########
# MAIN #
########

options(error = function() { traceback(2) ; q(status = 1) }, warn = 2 )

opt <- read.args()

# Define set of functions
if ( ! is.null(opt$name)) {
	test.fcts <- paste0('^', opt$name, '$')
} else {
	prefix <- NULL
	if (is.null(opt$online))
		prefix <- c(prefix, 'offline')
	if (is.null(opt$offline))
		prefix <- c(prefix, 'online')
	test.fcts <- paste0('^(', paste(prefix, collapse = '|'), ')\\.test\\..+')
}

test.suite <- defineTestSuite('biodb', dirname(script.path), testFileRegexp = '^test-databases\\.R$', testFuncRegexp = test.fcts)
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
