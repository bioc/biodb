#!/usr/bin/env Rscript
# vi: ft=R
#library(RUnit)
library(testthat)
library(getopt)
args <- commandArgs(trailingOnly = FALSE)
script.path <- sub("--file=", "", args[grep("--file=", args)])
source(file.path(dirname(script.path), '..', 'BiodbFactory.R'), chdir = TRUE)

#############
# CONSTANTS #
#############

USER.AGENT <- "r-biodb.test ; pierrick.roger@gmail.com"

#############
# READ ARGS #
#############

read.args <- function() {
  
  # program name
  prog <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)
  
  # options
  spec = matrix(c(
    'help',         'h', 0, 'logical',      'Print this help.',
    'name',         'n', 1, 'character',    'Run only test of the specified name. Unset by default.',
    'quick',        'q', 0, 'logical',      'Turn off long tests. Disabled by default.',
    'offline',      'f', 0, 'logical',      'Turn on offline tests. Enabled by default, but disabled when --online is set.',
    'online',       'o', 0, 'logical',      'Turn on online tests. Disabled by default.',
    'databases',    'd', 1, 'character',    paste0('Set a restricted list of databases to test. The list must be specified as a comma separated list, no spaces. If unset, test all databases. Possible databases are: ', paste(BIODB.DATABASES, collapse = ", ")),
    'debug',        'g', 0, 'logical',      'Turn on debug messages. Disabled by default.'
  ), byrow = TRUE, ncol = 5)
   
  opt <- getopt(spec)

  # Help
  if ( ! is.null(opt$help)) {
    cat(getopt(spec, usage = TRUE, command = prog))
    q(status = 0)
  }

  # Enable offline test
  if (is.null(opt[['online']]))
	  opt[['offline']] <- TRUE

  # Process lists
  if ( ! is.null(opt$databases))
	  opt$databases <- strsplit(opt$databases, ",")[[1]]

  return(opt)
}

###########
# TEST DB #
###########

test.db <- function(db) {

	# Test getEntryIds()
	max <- 100
	n <- db$getEntryIds(max.results = max)
	expect_true(n >= 0 && n <= max)

	# Test getNbEntries()
	n <- db$getNbEntries()
	expect_true(is.na(n) || n >= 0)
}

########
# MAIN #
########

options(error = function() { traceback(2) ; q(status = 1) }, warn = 2 )

opt <- read.args()

test_dir(dirname(script.path))
