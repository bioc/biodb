#!/usr/bin/env Rscript
# vi: ft=R
library(RUnit)
library(getopt)
args <- commandArgs(trailingOnly = FALSE)
script.path <- sub("--file=", "", args[grep("--file=", args)])
source(file.path(dirname(script.path), '..', 'BiodbFactory.R'), chdir = TRUE)

#############
# CONSTANTS #
#############

USER.AGENT <- "r-biodb.test ; pierrick.roger@gmail.com"

#############
# READ ARGS #
#############

read.args <- function() {
  
  # program name
  prog <- sub('^.*/([^/]+)$', '\\1', commandArgs()[4], perl = TRUE)
  
  # options
  spec = matrix(c(
    'all',          'a', 0, 'logical',      'Run all tests (online, long, etc.). Disabled by default.',
    'help',         'h', 0, 'logical',      'Print this help.',
    'name',         'n', 1, 'character',    'Run only test of the specified name. Unset by default.',
    'quick',        'q', 0, 'logical',      'Do not run long tests. Disabled by default.',
    'offline',      'o', 0, 'logical',      'Run offline tests only. Disabled by default.'
  ), byrow = TRUE, ncol = 5)
   
  opt <- getopt(spec)

  # help
  if ( ! is.null(opt$help)) {
    cat(getopt(spec, usage = TRUE, command = prog))
    q(status = 0)
  }

  return(opt)
}

###############
# ONLINE TEST #
###############

online.test <- function(entries) {

	factory <- BiodbFactory$new(useragent = USER.AGENT)

	# Loop on all entries
	for (e in entries) {

		# Get ID
		if ( ! 'id' %in% names(e))
			stop('One entry element does not contain an "id" field.')

		# Create connection instance
		if ( ! 'type' %in% names(e))
			stop(paste0('Entry element "', e$id, '" does not contain an "type" field.'))

		# File extention
		ext <- switch(factory$getConn(e$type)$getTypeOfDownloadableEntryFile(),
		              html = '.html',
		              text = '.txt',
		              xml = '.xml',
		              NULL)
		if (is.null(ext))
			stop(paste0('Unknown file type "', conn$getTypeOfDownloadableEntryFile(), '" for entry "', e$id, '".'))

		# Get Entry from database
		file <- paste0(e$type, '-entry-', e$id, ext)
		content <- factory$getConn(e$type)$downloadEntryFileContent(e$id, save_as = file)
		entry <- factory$createEntryFromContent(class = e$type, content)

		# Check fields
		for (f in names(e))
			switch(f,
			       id = if ( ! 'false' %in% names(e)) checkTrue( ! is.null(entry)) && checkEquals(entry$getId(), e$id),
			       false = checkTrue(is.null(entry)),
			       chebiid = checkEquals(entry$getChebiId(), e$chebiid),
			       inchi = checkEquals(entry$getInchi(), e$inchi),
			       inchikey = checkEquals(entry$getInchiKey(), e$inchikey)
			      )
	}
}

########
# MAIN #
########

# Call tests matching name: in script name or function name:
#  test.chebi.offline
#  test.chebi.online
#  test.chebi.full or test.chebi.long

options(error = function() { traceback(2) ; q(status = 1) }, warn = 2 )

opt <- read.args()

# Define set of functions
test.fcts = '^test\\..+'
if (is.null(opt$quick) && is.null(opt$all))
	test.fcts = c(test.fcts, '^long\\.test\\..+')
if (is.null(opt$offline) && is.null(opt$all))
	test.fcts = c(test.fcts, '^online\\.test\\..+')
if (is.null(opt$quick) && is.null(opt$offline) && is.null(opt$all))
	test.fcts = c(test.fcts, '^long\\.online\\.test\\..+')
if ( ! is.null(opt$name))
	test.fcts = paste0('^', opt$name, '$')

for (fct in test.fcts) {
	test.suite <- defineTestSuite('biodb', dirname(script.path), testFileRegexp = '^test-(chebi|kegg)\\.R$', testFuncRegexp = fct)
	runTestSuite(test.suite)
}
